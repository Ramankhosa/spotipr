'use client'

import { useState, useEffect } from 'react'
import { useAuth } from '@/lib/auth-context'

interface Tenant {
  id: string
  name: string
  ati_id: string
  status: string
  user_count: number
  ati_token_count: number
  created_at: string
}

interface ATIToken {
  id: string
  fingerprint: string
  status: string
  expires_at: string | null
  max_uses: number | null
  usage_count: number
  plan_tier: string | null
  notes: string | null
  created_at: string
  updated_at: string
  tenant: {
    id: string
    name: string
    ati_id: string
  }
}

export default function SuperAdminDashboard() {
  const { user, logout } = useAuth()
  const [activeTab, setActiveTab] = useState<'tenants' | 'ati'>('tenants')
  const [tenants, setTenants] = useState<Tenant[]>([])
  const [atiTokens, setAtiTokens] = useState<ATIToken[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [editingToken, setEditingToken] = useState<ATIToken | null>(null)
  const [isUpdating, setIsUpdating] = useState(false)
  const [editForm, setEditForm] = useState({
    status: '',
    expires_at: '',
    max_uses: '',
    plan_tier: '',
    notes: ''
  })
  const [showCreateForm, setShowCreateForm] = useState(false)
  const [newTenant, setNewTenant] = useState({
    name: '',
    atiId: '',
    generateInitialToken: true,
    expires_at: '',
    max_uses: '',
    plan_tier: ''
  })
  const [isCreating, setIsCreating] = useState(false)
  const [createdToken, setCreatedToken] = useState<string | null>(null)

  useEffect(() => {
    if (activeTab === 'tenants') {
      fetchTenants()
    } else if (activeTab === 'ati') {
      fetchAtiTokens()
    }
  }, [activeTab])

  const fetchTenants = async () => {
    try {
      setIsLoading(true)
      const response = await fetch('/api/v1/platform/tenants', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        }
      })

      if (response.ok) {
        const data = await response.json()
        setTenants(data)
      }
    } catch (error) {
      console.error('Failed to fetch tenants:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const fetchAtiTokens = async () => {
    try {
      setIsLoading(true)
      const response = await fetch('/api/v1/platform/ati', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        }
      })

      if (response.ok) {
        const data = await response.json()
        setAtiTokens(data)
      }
    } catch (error) {
      console.error('Failed to fetch ATI tokens:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const handleCreateTenant = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsCreating(true)

    try {
      const requestBody: any = {
        name: newTenant.name,
        atiId: newTenant.atiId.toUpperCase(),
        generateInitialToken: newTenant.generateInitialToken
      }

      if (newTenant.generateInitialToken) {
        requestBody.initialTokenConfig = {}
        if (newTenant.expires_at) requestBody.initialTokenConfig.expires_at = newTenant.expires_at
        if (newTenant.max_uses) requestBody.initialTokenConfig.max_uses = parseInt(newTenant.max_uses)
        if (newTenant.plan_tier) requestBody.initialTokenConfig.plan_tier = newTenant.plan_tier
      }

      const response = await fetch('/api/v1/platform/tenants', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        },
        body: JSON.stringify(requestBody)
      })

      if (response.ok) {
        const data = await response.json()

        // If initial token was generated, show it
        if (data.initial_token) {
          setCreatedToken(data.initial_token.token_display_once)
          // Auto-hide token after 30 seconds
          setTimeout(() => setCreatedToken(null), 30000)
        }

        setNewTenant({
          name: '',
          atiId: '',
          generateInitialToken: true,
          expires_at: '',
          max_uses: '',
          plan_tier: ''
        })
        setShowCreateForm(false)
        fetchTenants()
      } else {
        const error = await response.json()
        alert(error.message || 'Failed to create tenant')
      }
    } catch (error) {
      console.error('Failed to create tenant:', error)
      alert('Failed to create tenant')
    } finally {
      setIsCreating(false)
    }
  }

  const handleEditToken = (token: ATIToken) => {
    setEditingToken(token)
    setEditForm({
      status: token.status,
      expires_at: token.expires_at || '',
      max_uses: token.max_uses?.toString() || '',
      plan_tier: token.plan_tier || '',
      notes: token.notes || ''
    })
  }

  const handleUpdateToken = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!editingToken) return

    setIsUpdating(true)

    try {
      const response = await fetch(`/api/v1/platform/ati/${editingToken.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        },
        body: JSON.stringify({
          status: editForm.status || undefined,
          expires_at: editForm.expires_at || undefined,
          max_uses: editForm.max_uses ? parseInt(editForm.max_uses) : undefined,
          plan_tier: editForm.plan_tier || undefined,
          notes: editForm.notes || undefined
        })
      })

      if (response.ok) {
        setEditingToken(null)
        setEditForm({ status: '', expires_at: '', max_uses: '', plan_tier: '', notes: '' })
        fetchAtiTokens()
      } else {
        const error = await response.json()
        alert(error.message || 'Failed to update token')
      }
    } catch (error) {
      console.error('Failed to update token:', error)
      alert('Failed to update token')
    } finally {
      setIsUpdating(false)
    }
  }

  const handleRevokeToken = async (tokenId: string) => {
    if (!confirm('Are you sure you want to revoke this token? Users will no longer be able to use it.')) {
      return
    }

    try {
      const response = await fetch(`/api/v1/platform/ati/${tokenId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        }
      })

      if (response.ok) {
        fetchAtiTokens()
      } else {
        alert('Failed to revoke token')
      }
    } catch (error) {
      console.error('Failed to revoke token:', error)
      alert('Failed to revoke token')
    }
  }

  const totalUsers = tenants.reduce((sum, tenant) => sum + tenant.user_count, 0)
  const totalTokens = tenants.reduce((sum, tenant) => sum + tenant.ati_token_count, 0)

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Super Admin Dashboard</h1>
              <p className="text-gray-600">Platform management and tenant oversight</p>
            </div>
            <div className="flex items-center space-x-4">
              <span className="text-sm text-gray-500">Welcome, {user?.email}</span>
              <button
                onClick={logout}
                className="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
              >
                Logout
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* Token Display Modal */}
      {createdToken && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50" onClick={() => setCreatedToken(null)}>
          <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white" onClick={(e) => e.stopPropagation()}>
            <div className="mt-3">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium text-gray-900">Initial ATI Token Generated</h3>
                <button
                  onClick={() => setCreatedToken(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <span className="sr-only">Close</span>
                  <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
              <div className="bg-yellow-50 border border-yellow-200 rounded-md p-4 mb-4">
                <div className="flex">
                  <div className="flex-shrink-0">
                    <svg className="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                  </div>
                  <div className="ml-3">
                    <p className="text-sm text-yellow-800 font-medium">Security Warning</p>
                    <p className="text-sm text-yellow-700 mt-1">
                      Copy this token now and store it securely. It will never be shown again.
                    </p>
                  </div>
                </div>
              </div>
              <div className="bg-gray-50 border border-gray-200 rounded-md p-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">ATI Token:</label>
                <div className="font-mono text-sm bg-white border border-gray-300 rounded px-3 py-2 break-all">
                  {createdToken}
                </div>
                <button
                  onClick={() => navigator.clipboard.writeText(createdToken)}
                  className="mt-2 inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-md text-indigo-700 bg-indigo-100 hover:bg-indigo-200"
                >
                  Copy to Clipboard
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        {/* Tab Navigation */}
        <div className="mb-8">
          <nav className="flex space-x-8" aria-label="Tabs">
            <button
              onClick={() => setActiveTab('tenants')}
              className={`py-2 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'tenants'
                  ? 'border-indigo-500 text-indigo-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              Tenant Management
            </button>
            <button
              onClick={() => setActiveTab('ati')}
              className={`py-2 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'ati'
                  ? 'border-indigo-500 text-indigo-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              ATI Token Management
            </button>
          </nav>
        </div>

        {/* Stats Overview */}
        {activeTab === 'tenants' && (
          <div className="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4 mb-8">
            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                      <span className="text-white text-sm font-bold">T</span>
                    </div>
                  </div>
                  <div className="ml-5 w-0 flex-1">
                    <dl>
                      <dt className="text-sm font-medium text-gray-500 truncate">Total Tenants</dt>
                      <dd className="text-lg font-medium text-gray-900">{tenants.length}</dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
                      <span className="text-white text-sm font-bold">U</span>
                    </div>
                  </div>
                  <div className="ml-5 w-0 flex-1">
                    <dl>
                      <dt className="text-sm font-medium text-gray-500 truncate">Total Users</dt>
                      <dd className="text-lg font-medium text-gray-900">{totalUsers}</dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center">
                      <span className="text-white text-sm font-bold">A</span>
                    </div>
                  </div>
                  <div className="ml-5 w-0 flex-1">
                    <dl>
                      <dt className="text-sm font-medium text-gray-500 truncate">ATI Tokens</dt>
                      <dd className="text-lg font-medium text-gray-900">{totalTokens}</dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-yellow-500 rounded-full flex items-center justify-center">
                      <span className="text-white text-sm font-bold">A</span>
                    </div>
                  </div>
                  <div className="ml-5 w-0 flex-1">
                    <dl>
                      <dt className="text-sm font-medium text-gray-500 truncate">Active Tenants</dt>
                      <dd className="text-lg font-medium text-gray-900">
                        {tenants.filter(t => t.status === 'ACTIVE').length}
                      </dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'ati' && (
          <div className="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-5 mb-8">
            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
                      <span className="text-white text-sm font-bold">A</span>
                    </div>
                  </div>
                  <div className="ml-5 w-0 flex-1">
                    <dl>
                      <dt className="text-sm font-medium text-gray-500 truncate">Active Tokens</dt>
                      <dd className="text-lg font-medium text-gray-900">
                        {atiTokens.filter(t => t.status === 'ACTIVE' || t.status === 'ISSUED').length}
                      </dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                      <span className="text-white text-sm font-bold">U</span>
                    </div>
                  </div>
                  <div className="ml-5 w-0 flex-1">
                    <dl>
                      <dt className="text-sm font-medium text-gray-500 truncate">Total Usage</dt>
                      <dd className="text-lg font-medium text-gray-900">
                        {atiTokens.reduce((sum, t) => sum + t.usage_count, 0)}
                      </dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center">
                      <span className="text-white text-sm font-bold">S</span>
                    </div>
                  </div>
                  <div className="ml-5 w-0 flex-1">
                    <dl>
                      <dt className="text-sm font-medium text-gray-500 truncate">Suspended Tokens</dt>
                      <dd className="text-lg font-medium text-gray-900">
                        {atiTokens.filter(t => t.status === 'SUSPENDED').length}
                      </dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-red-500 rounded-full flex items-center justify-center">
                      <span className="text-white text-sm font-bold">R</span>
                    </div>
                  </div>
                  <div className="ml-5 w-0 flex-1">
                    <dl>
                      <dt className="text-sm font-medium text-gray-500 truncate">Revoked Tokens</dt>
                      <dd className="text-lg font-medium text-gray-900">
                        {atiTokens.filter(t => t.status === 'REVOKED').length}
                      </dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-yellow-500 rounded-full flex items-center justify-center">
                      <span className="text-white text-sm font-bold">T</span>
                    </div>
                  </div>
                  <div className="ml-5 w-0 flex-1">
                    <dl>
                      <dt className="text-sm font-medium text-gray-500 truncate">Total Tokens</dt>
                      <dd className="text-lg font-medium text-gray-900">{atiTokens.length}</dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Edit Token Section */}
        {editingToken && activeTab === 'ati' && (
          <div className="bg-white shadow rounded-lg mb-8">
            <div className="px-4 py-5 sm:p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg leading-6 font-medium text-gray-900">
                  Edit ATI Token: {editingToken.fingerprint}
                </h3>
                <button
                  onClick={() => setEditingToken(null)}
                  className="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
                >
                  Cancel
                </button>
              </div>

              <div className="mb-4 p-4 bg-gray-50 rounded-md">
                <h4 className="text-sm font-medium text-gray-900 mb-2">Tenant Information</h4>
                <p className="text-sm text-gray-600">
                  <strong>Tenant:</strong> {editingToken.tenant.name} ({editingToken.tenant.ati_id})
                </p>
              </div>

              <form onSubmit={handleUpdateToken} className="space-y-4">
                <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                  <div>
                    <label htmlFor="edit_status" className="block text-sm font-medium text-gray-700">
                      Status
                    </label>
                    <select
                      id="edit_status"
                      value={editForm.status}
                      onChange={(e) => setEditForm(prev => ({ ...prev, status: e.target.value }))}
                      className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                    >
                      <option value="ACTIVE">Active</option>
                      <option value="INACTIVE">Inactive</option>
                      <option value="SUSPENDED">Suspended</option>
                      <option value="ISSUED">Issued</option>
                      <option value="REVOKED">Revoked</option>
                      <option value="EXPIRED">Expired</option>
                      <option value="USED_UP">Used Up</option>
                    </select>
                  </div>
                  <div>
                    <label htmlFor="edit_expires_at" className="block text-sm font-medium text-gray-700">
                      Expiration Date (Optional)
                    </label>
                    <input
                      type="datetime-local"
                      id="edit_expires_at"
                      value={editForm.expires_at}
                      onChange={(e) => setEditForm(prev => ({ ...prev, expires_at: e.target.value }))}
                      className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                    />
                  </div>
                </div>
                <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                  <div>
                    <label htmlFor="edit_max_uses" className="block text-sm font-medium text-gray-700">
                      Max Uses (Optional)
                    </label>
                    <input
                      type="number"
                      id="edit_max_uses"
                      value={editForm.max_uses}
                      onChange={(e) => setEditForm(prev => ({ ...prev, max_uses: e.target.value }))}
                      className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                      placeholder="Unlimited if empty"
                      min="1"
                    />
                  </div>
                  <div>
                    <label htmlFor="edit_plan_tier" className="block text-sm font-medium text-gray-700">
                      Plan Tier (Optional)
                    </label>
                    <select
                      id="edit_plan_tier"
                      value={editForm.plan_tier}
                      onChange={(e) => setEditForm(prev => ({ ...prev, plan_tier: e.target.value }))}
                      className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                    >
                      <option value="">Select tier</option>
                      <option value="BASIC">Basic</option>
                      <option value="PRO">Pro</option>
                      <option value="ENTERPRISE">Enterprise</option>
                    </select>
                  </div>
                </div>
                <div>
                  <label htmlFor="edit_notes" className="block text-sm font-medium text-gray-700">
                    Notes (Optional)
                  </label>
                  <input
                    type="text"
                    id="edit_notes"
                    value={editForm.notes}
                    onChange={(e) => setEditForm(prev => ({ ...prev, notes: e.target.value }))}
                    className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                    placeholder="Purpose or recipient"
                  />
                </div>
                <div className="flex justify-end space-x-3">
                  <button
                    type="button"
                    onClick={() => setEditingToken(null)}
                    className="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    disabled={isUpdating}
                    className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 disabled:opacity-50"
                  >
                    {isUpdating ? 'Updating...' : 'Update Token'}
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

        {/* Create Tenant Section */}
        {activeTab === 'tenants' && (
          <>
            <div className="bg-white shadow rounded-lg mb-8">
          <div className="px-4 py-5 sm:p-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg leading-6 font-medium text-gray-900">Create New Tenant</h3>
              <button
                onClick={() => setShowCreateForm(!showCreateForm)}
                className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700"
              >
                {showCreateForm ? 'Cancel' : '+ Add Tenant'}
              </button>
            </div>

            {showCreateForm && (
              <form onSubmit={handleCreateTenant} className="space-y-6">
                <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                  <div>
                    <label htmlFor="tenantName" className="block text-sm font-medium text-gray-700">
                      Company Name
                    </label>
                    <input
                      type="text"
                      id="tenantName"
                      value={newTenant.name}
                      onChange={(e) => setNewTenant(prev => ({ ...prev, name: e.target.value }))}
                      className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                      placeholder="Acme Corporation"
                      required
                    />
                  </div>
                  <div>
                    <label htmlFor="atiId" className="block text-sm font-medium text-gray-700">
                      ATI ID
                    </label>
                    <input
                      type="text"
                      id="atiId"
                      value={newTenant.atiId}
                      onChange={(e) => setNewTenant(prev => ({ ...prev, atiId: e.target.value }))}
                      className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                      placeholder="ACME001"
                      required
                    />
                    <p className="mt-1 text-sm text-gray-500">Unique identifier, will be converted to uppercase</p>
                  </div>
                </div>

                {/* Initial Token Generation Options */}
                <div className="border-t border-gray-200 pt-4">
                  <div className="flex items-center mb-4">
                    <input
                      id="generateInitialToken"
                      type="checkbox"
                      checked={newTenant.generateInitialToken}
                      onChange={(e) => setNewTenant(prev => ({ ...prev, generateInitialToken: e.target.checked }))}
                      className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                    />
                    <label htmlFor="generateInitialToken" className="ml-2 block text-sm text-gray-900">
                      Generate initial ATI token for tenant onboarding
                    </label>
                  </div>

                  {newTenant.generateInitialToken && (
                    <div className="grid grid-cols-1 gap-4 sm:grid-cols-3 ml-6">
                      <div>
                        <label htmlFor="expires_at" className="block text-sm font-medium text-gray-700">
                          Expires At (Optional)
                        </label>
                        <input
                          type="datetime-local"
                          id="expires_at"
                          value={newTenant.expires_at}
                          onChange={(e) => setNewTenant(prev => ({ ...prev, expires_at: e.target.value }))}
                          className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                        />
                      </div>
                      <div>
                        <label htmlFor="max_uses" className="block text-sm font-medium text-gray-700">
                          Max Uses (Optional)
                        </label>
                        <input
                          type="number"
                          id="max_uses"
                          value={newTenant.max_uses}
                          onChange={(e) => setNewTenant(prev => ({ ...prev, max_uses: e.target.value }))}
                          className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                          placeholder="Unlimited"
                          min="1"
                        />
                      </div>
                      <div>
                        <label htmlFor="plan_tier" className="block text-sm font-medium text-gray-700">
                          Plan Tier (Optional)
                        </label>
                        <select
                          id="plan_tier"
                          value={newTenant.plan_tier}
                          onChange={(e) => setNewTenant(prev => ({ ...prev, plan_tier: e.target.value }))}
                          className="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                        >
                          <option value="">Select tier</option>
                          <option value="BASIC">Basic</option>
                          <option value="PRO">Pro</option>
                          <option value="ENTERPRISE">Enterprise</option>
                        </select>
                      </div>
                    </div>
                  )}
                </div>

                <div className="flex justify-end space-x-3">
                  <button
                    type="button"
                    onClick={() => {
                      setShowCreateForm(false)
                      setNewTenant({
                        name: '',
                        atiId: '',
                        generateInitialToken: true,
                        expires_at: '',
                        max_uses: '',
                        plan_tier: ''
                      })
                    }}
                    className="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    disabled={isCreating}
                    className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 disabled:opacity-50"
                  >
                    {isCreating ? 'Creating...' : 'Create Tenant'}
                  </button>
                </div>
              </form>
            )}
          </div>
        </div>
          <div className="bg-white shadow overflow-hidden sm:rounded-md">
          <div className="px-4 py-5 sm:px-6 border-b border-gray-200">
            <h3 className="text-lg leading-6 font-medium text-gray-900">Tenant Management</h3>
            <p className="mt-1 max-w-2xl text-sm text-gray-500">
              Overview of all tenants and their activity
            </p>
          </div>

          {isLoading ? (
            <div className="text-center py-12">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600 mx-auto"></div>
              <p className="mt-2 text-sm text-gray-500">Loading tenants...</p>
            </div>
          ) : tenants.length === 0 ? (
            <div className="text-center py-12">
              <div className="text-gray-500">
                <svg className="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                </svg>
              </div>
              <h3 className="mt-2 text-sm font-medium text-gray-900">No tenants yet</h3>
              <p className="mt-1 text-sm text-gray-500">Create your first tenant to get started.</p>
            </div>
          ) : (
            <ul className="divide-y divide-gray-200">
              {tenants.map((tenant) => (
                <li key={tenant.id} className="px-4 py-4 sm:px-6 hover:bg-gray-50">
                  <div className="flex items-center justify-between">
                    <div className="flex-1">
                      <div className="flex items-center">
                        <div className="flex-1">
                          <h4 className="text-sm font-medium text-gray-900">{tenant.name}</h4>
                          <p className="text-sm text-gray-500">ATI ID: {tenant.ati_id}</p>
                        </div>
                        <div className="ml-4 flex flex-col items-end space-y-1">
                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                            tenant.status === 'ACTIVE'
                              ? 'bg-green-100 text-green-800'
                              : 'bg-red-100 text-red-800'
                          }`}>
                            {tenant.status}
                          </span>
                          <div className="text-xs text-gray-500">
                            {tenant.user_count} users • {tenant.ati_token_count} tokens
                          </div>
                        </div>
                      </div>
                      <div className="mt-2 text-xs text-gray-500">
                        Created {new Date(tenant.created_at).toLocaleDateString()}
                      </div>
                    </div>
                  </div>
                </li>
              ))}
            </ul>
          )}
        </div>
        )}

        {/* ATI Tokens List */}
        {activeTab === 'ati' && (
          <div className="bg-white shadow overflow-hidden sm:rounded-md">
            <div className="px-4 py-5 sm:px-6 border-b border-gray-200">
              <h3 className="text-lg leading-6 font-medium text-gray-900">Global ATI Token Management</h3>
              <p className="mt-1 max-w-2xl text-sm text-gray-500">
                Manage access tokens across all tenants in the system
              </p>
            </div>

            {isLoading ? (
              <div className="text-center py-12">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600 mx-auto"></div>
                <p className="mt-2 text-sm text-gray-500">Loading tokens...</p>
              </div>
            ) : atiTokens.length === 0 ? (
              <div className="text-center py-12">
                <div className="text-gray-500">
                  <svg className="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z" />
                  </svg>
                </div>
                <h3 className="mt-2 text-sm font-medium text-gray-900">No tokens found</h3>
                <p className="mt-1 text-sm text-gray-500">No ATI tokens exist in the system yet.</p>
              </div>
            ) : (
              <ul className="divide-y divide-gray-200">
                {atiTokens.map((token) => (
                  <li key={token.id} className="px-4 py-4 sm:px-6 hover:bg-gray-50">
                    <div className="flex items-center justify-between">
                      <div className="flex-1">
                        <div className="flex items-center">
                          <div className="flex-1">
                            <h4 className="text-sm font-medium text-gray-900 font-mono">
                              {token.fingerprint}
                            </h4>
                            <div className="mt-1 flex items-center space-x-4 text-xs text-gray-500">
                              <span>Status: {token.status}</span>
                              <span>Tenant: {token.tenant.name} ({token.tenant.ati_id})</span>
                              {token.max_uses && (
                                <span>Usage: {token.usage_count}/{token.max_uses}</span>
                              )}
                              {token.plan_tier && (
                                <span>Tier: {token.plan_tier}</span>
                              )}
                            </div>
                            {token.expires_at && (
                              <div className="mt-1 text-xs text-gray-500">
                                Expires: {new Date(token.expires_at).toLocaleString()}
                              </div>
                            )}
                            {token.notes && (
                              <div className="mt-1 text-xs text-gray-500">
                                Notes: {token.notes}
                              </div>
                            )}
                          </div>
                          <div className="ml-4">
                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                              token.status === 'ACTIVE'
                                ? 'bg-green-100 text-green-800'
                                : token.status === 'INACTIVE'
                                ? 'bg-gray-100 text-gray-800'
                                : token.status === 'SUSPENDED'
                                ? 'bg-orange-100 text-orange-800'
                                : token.status === 'ISSUED'
                                ? 'bg-blue-100 text-blue-800'
                                : token.status === 'REVOKED'
                                ? 'bg-red-100 text-red-800'
                                : token.status === 'EXPIRED'
                                ? 'bg-yellow-100 text-yellow-800'
                                : 'bg-gray-100 text-gray-800'
                            }`}>
                              {token.status}
                            </span>
                          </div>
                        </div>
                        <div className="mt-2 text-xs text-gray-500">
                          Created {new Date(token.created_at).toLocaleDateString()}
                        </div>
                      </div>
                      <div className="flex space-x-2">
                        <button
                          onClick={() => handleEditToken(token)}
                          className="inline-flex items-center px-3 py-1 border border-gray-300 text-xs font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
                        >
                          Edit
                        </button>
                        {(token.status === 'ISSUED' || token.status === 'ACTIVE') && (
                          <button
                            onClick={() => handleRevokeToken(token.id)}
                            className="inline-flex items-center px-3 py-1 border border-transparent text-xs font-medium rounded-md text-white bg-red-600 hover:bg-red-700"
                          >
                            Revoke
                          </button>
                        )}
                      </div>
                    </div>
                  </li>
                ))}
              </ul>
            )}
          </div>
        )}
      </main>
    </div>
  )
}
